<?xml version="1.0" encoding="UTF-8"?>
<!-- root 엘리먼트는 하나만 있어어 한다 -->
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />    <!-- 이게 있어야 @을 사용할 수 있음 -->

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<!-- 		property -> setPrefix("/WEB-INF/views"), setSuffix(".jsp"); -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />   
		<beans:property name="suffix" value=".jsp" />

	</beans:bean>
	
	<context:component-scan base-package="com.mycompany.myapp" />   <!-- base-package 위에 있는 controller는 찾지 못함. --> 
	<!-- controller가 component이기때문에 component를 찾는 기능을 해주는 코드 -->
	
	<!-- A를 관리 객체로 생성 -->
	<beans:bean name="aObj" class="com.mycompany.myapp.exam09.A"/>   <!-- bean태그는 스프링관리객체로 생성한느 역할을 함 -->
	
	<!-- B를 관리 객체로 생성 -->
	<beans:bean name="bObj" class="com.mycompany.myapp.exam09.B"/>  
	
	<!-- ServiceA를 관리 객체로 생성 -->
	<beans:bean name="saObj" class="com.mycompany.myapp.exam09.ServiceA"/>
	
	<!-- ServiceB를 관리 객체로 생성 -->
	<beans:bean name="sbObj" class="com.mycompany.myapp.exam09.ServiceB"/>
	
	<!-- ServiceC를 관리 객체로 생성 -->
	<beans:bean name="scIObj" class="com.mycompany.myapp.exam09.ServiceCImple1"/>
	
	<!-- ServiceD를 관리 객체로 생성 -->
	<beans:bean name="sdIObj" class="com.mycompany.myapp.exam09.ServiceCImple2"/>
	
	<!-- C를 관리 객체로 생성 -->
	<beans:bean name="c" class="com.mycompany.myapp.exam09.C">   <!-- 기본생성자를 생성해야 에러가 안남 -->
	 	<beans:constructor-arg ref="d"/>
	</beans:bean> 
	
	<!-- D를 관리 객체로 생성 -->
	<beans:bean name="d" class="com.mycompany.myapp.exam09.D"/>
	
	<!-- E를 관리 객체로 생성 -->
	<beans:bean name="e" class="com.mycompany.myapp.exam09.E">   <!-- 기본생성자를 생성해야 에러가 안남 -->
	 	<beans:constructor-arg ref="bObj"/>
	 	<beans:constructor-arg ref="d"/>
	</beans:bean>
	
	<!-- F를 관리 객체로 생성 -->
	<beans:bean name="f" class="com.mycompany.myapp.exam09.F">   <!-- 기본생성자를 생성해야 에러가 안남 -->
	 	<beans:constructor-arg ref="saObj"/>
	 	<beans:constructor-arg ref="sbObj"/>
	 	<beans:constructor-arg ref="scIObj"/>
	</beans:bean>  
	

	<!-- Exam09Controller 객체를 찾아서 가져오기 -->
	<beans:bean name="exam09Controller" class="com.mycompany.myapp.exam09.Exam09Controller">
		<!-- Setter 주입 -->
		<beans:property name="a" ref="aObj"/>   <!--name=setter의 이름, ref=관리객체의 이름(의존객체의 이름) -->
		<beans:property name="b" ref="bObj"/>
		<beans:property name="sa" ref="saObj"/>
		<beans:property name="sb" ref="sbObj"/>
		<beans:property name="sc" ref="scIObj"/>
		<beans:property name="sd" ref="sdIObj"/>
		<beans:property name="c" ref="c"/> <!-- ref:관리객체 이름, name:setter이름 -->
		<beans:property name="e" ref="e"/>
		<beans:property name="f" ref="f"/>
	</beans:bean>
</beans:beans>
